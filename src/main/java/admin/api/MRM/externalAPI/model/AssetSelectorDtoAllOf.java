/*
 * All MRM packages REST API
 * <h2>All MRM packages REST API</h1>
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package admin.api.MRM.externalAPI.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * AssetSelectorDtoAllOf
 */

public class AssetSelectorDtoAllOf
{
  public static final String SERIALIZED_NAME_TYPE_SPANNING = "typeSpanning";
  @SerializedName(SERIALIZED_NAME_TYPE_SPANNING)
  private Boolean typeSpanning;

  public static final String SERIALIZED_NAME_INHERIT_FROM_PARENT = "inheritFromParent";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_PARENT)
  private Boolean inheritFromParent;

  public static final String SERIALIZED_NAME_PREFILLING = "prefilling";
  @SerializedName(SERIALIZED_NAME_PREFILLING)
  private PrefillingDto prefilling;

  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private AssetDto asset;

  public static final String SERIALIZED_NAME_COMPLETE_WIDTH = "completeWidth";
  @SerializedName(SERIALIZED_NAME_COMPLETE_WIDTH)
  private Boolean completeWidth;


  public AssetSelectorDtoAllOf typeSpanning(Boolean typeSpanning)
  {

    this.typeSpanning = typeSpanning;
    return this;
  }

  /**
   * @return typeSpanning
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTypeSpanning()
  {
    return typeSpanning;
  }


  public void setTypeSpanning(Boolean typeSpanning)
  {
    this.typeSpanning = typeSpanning;
  }


  public AssetSelectorDtoAllOf inheritFromParent(Boolean inheritFromParent)
  {

    this.inheritFromParent = inheritFromParent;
    return this;
  }

  /**
   * @return inheritFromParent
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInheritFromParent()
  {
    return inheritFromParent;
  }


  public void setInheritFromParent(Boolean inheritFromParent)
  {
    this.inheritFromParent = inheritFromParent;
  }


  public AssetSelectorDtoAllOf prefilling(PrefillingDto prefilling)
  {

    this.prefilling = prefilling;
    return this;
  }

  /**
   * Get prefilling
   *
   * @return prefilling
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrefillingDto getPrefilling()
  {
    return prefilling;
  }


  public void setPrefilling(PrefillingDto prefilling)
  {
    this.prefilling = prefilling;
  }


  public AssetSelectorDtoAllOf asset(AssetDto asset)
  {

    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   *
   * @return asset
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AssetDto getAsset()
  {
    return asset;
  }


  public void setAsset(AssetDto asset)
  {
    this.asset = asset;
  }


  public AssetSelectorDtoAllOf completeWidth(Boolean completeWidth)
  {

    this.completeWidth = completeWidth;
    return this;
  }

  /**
   * @return completeWidth
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCompleteWidth()
  {
    return completeWidth;
  }


  public void setCompleteWidth(Boolean completeWidth)
  {
    this.completeWidth = completeWidth;
  }


  @Override
  public boolean equals(Object o)
  {
    if (this == o)
    {
      return true;
    }
    if (o == null || getClass() != o.getClass())
    {
      return false;
    }
    AssetSelectorDtoAllOf assetSelectorDtoAllOf = (AssetSelectorDtoAllOf) o;
    return Objects.equals(this.typeSpanning, assetSelectorDtoAllOf.typeSpanning) &&
            Objects.equals(this.inheritFromParent, assetSelectorDtoAllOf.inheritFromParent) &&
            Objects.equals(this.prefilling, assetSelectorDtoAllOf.prefilling) &&
            Objects.equals(this.asset, assetSelectorDtoAllOf.asset) &&
            Objects.equals(this.completeWidth, assetSelectorDtoAllOf.completeWidth);
  }

  @Override
  public int hashCode()
  {
    return Objects.hash(typeSpanning, inheritFromParent, prefilling, asset, completeWidth);
  }

  @Override
  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetSelectorDtoAllOf {\n");
    sb.append("    typeSpanning: ").append(toIndentedString(typeSpanning)).append("\n");
    sb.append("    inheritFromParent: ").append(toIndentedString(inheritFromParent)).append("\n");
    sb.append("    prefilling: ").append(toIndentedString(prefilling)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    completeWidth: ").append(toIndentedString(completeWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o)
  {
    if (o == null)
    {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

