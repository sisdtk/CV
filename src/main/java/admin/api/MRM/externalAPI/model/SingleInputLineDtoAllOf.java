/*
 * All MRM packages REST API
 * <h2>All MRM packages REST API</h1>
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package admin.api.MRM.externalAPI.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * SingleInputLineDtoAllOf
 */

public class SingleInputLineDtoAllOf
{
  public static final String SERIALIZED_NAME_TYPE_SPANNING = "typeSpanning";
  @SerializedName(SERIALIZED_NAME_TYPE_SPANNING)
  private Boolean typeSpanning;

  public static final String SERIALIZED_NAME_MAX_CHARACTERS = "maxCharacters";
  @SerializedName(SERIALIZED_NAME_MAX_CHARACTERS)
  private Integer maxCharacters;

  public static final String SERIALIZED_NAME_REGEXP_VALIDATOR = "regexpValidator";
  @SerializedName(SERIALIZED_NAME_REGEXP_VALIDATOR)
  private String regexpValidator;

  public static final String SERIALIZED_NAME_INPUT_SIZE = "inputSize";
  @SerializedName(SERIALIZED_NAME_INPUT_SIZE)
  private Integer inputSize;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_INHERIT_FROM_PARENT = "inheritFromParent";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_PARENT)
  private Boolean inheritFromParent;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_PREFILLING = "prefilling";
  @SerializedName(SERIALIZED_NAME_PREFILLING)
  private PrefillingDto prefilling;


  public SingleInputLineDtoAllOf typeSpanning(Boolean typeSpanning)
  {

    this.typeSpanning = typeSpanning;
    return this;
  }

  /**
   * @return typeSpanning
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTypeSpanning()
  {
    return typeSpanning;
  }


  public void setTypeSpanning(Boolean typeSpanning)
  {
    this.typeSpanning = typeSpanning;
  }


  public SingleInputLineDtoAllOf maxCharacters(Integer maxCharacters)
  {

    this.maxCharacters = maxCharacters;
    return this;
  }

  /**
   * @return maxCharacters
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxCharacters()
  {
    return maxCharacters;
  }


  public void setMaxCharacters(Integer maxCharacters)
  {
    this.maxCharacters = maxCharacters;
  }


  public SingleInputLineDtoAllOf regexpValidator(String regexpValidator)
  {

    this.regexpValidator = regexpValidator;
    return this;
  }

  /**
   * @return regexpValidator
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegexpValidator()
  {
    return regexpValidator;
  }


  public void setRegexpValidator(String regexpValidator)
  {
    this.regexpValidator = regexpValidator;
  }


  public SingleInputLineDtoAllOf inputSize(Integer inputSize)
  {

    this.inputSize = inputSize;
    return this;
  }

  /**
   * @return inputSize
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInputSize()
  {
    return inputSize;
  }


  public void setInputSize(Integer inputSize)
  {
    this.inputSize = inputSize;
  }


  public SingleInputLineDtoAllOf suffix(String suffix)
  {

    this.suffix = suffix;
    return this;
  }

  /**
   * @return suffix
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSuffix()
  {
    return suffix;
  }


  public void setSuffix(String suffix)
  {
    this.suffix = suffix;
  }


  public SingleInputLineDtoAllOf inheritFromParent(Boolean inheritFromParent)
  {

    this.inheritFromParent = inheritFromParent;
    return this;
  }

  /**
   * @return inheritFromParent
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getInheritFromParent()
  {
    return inheritFromParent;
  }


  public void setInheritFromParent(Boolean inheritFromParent)
  {
    this.inheritFromParent = inheritFromParent;
  }


  public SingleInputLineDtoAllOf defaultValue(String defaultValue)
  {

    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * @return defaultValue
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultValue()
  {
    return defaultValue;
  }


  public void setDefaultValue(String defaultValue)
  {
    this.defaultValue = defaultValue;
  }


  public SingleInputLineDtoAllOf prefilling(PrefillingDto prefilling)
  {

    this.prefilling = prefilling;
    return this;
  }

  /**
   * Get prefilling
   *
   * @return prefilling
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrefillingDto getPrefilling()
  {
    return prefilling;
  }


  public void setPrefilling(PrefillingDto prefilling)
  {
    this.prefilling = prefilling;
  }


  @Override
  public boolean equals(Object o)
  {
    if (this == o)
    {
      return true;
    }
    if (o == null || getClass() != o.getClass())
    {
      return false;
    }
    SingleInputLineDtoAllOf singleInputLineDtoAllOf = (SingleInputLineDtoAllOf) o;
    return Objects.equals(this.typeSpanning, singleInputLineDtoAllOf.typeSpanning) &&
            Objects.equals(this.maxCharacters, singleInputLineDtoAllOf.maxCharacters) &&
            Objects.equals(this.regexpValidator, singleInputLineDtoAllOf.regexpValidator) &&
            Objects.equals(this.inputSize, singleInputLineDtoAllOf.inputSize) &&
            Objects.equals(this.suffix, singleInputLineDtoAllOf.suffix) &&
            Objects.equals(this.inheritFromParent, singleInputLineDtoAllOf.inheritFromParent) &&
            Objects.equals(this.defaultValue, singleInputLineDtoAllOf.defaultValue) &&
            Objects.equals(this.prefilling, singleInputLineDtoAllOf.prefilling);
  }

  @Override
  public int hashCode()
  {
    return Objects.hash(typeSpanning, maxCharacters, regexpValidator, inputSize, suffix, inheritFromParent, defaultValue, prefilling);
  }

  @Override
  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleInputLineDtoAllOf {\n");
    sb.append("    typeSpanning: ").append(toIndentedString(typeSpanning)).append("\n");
    sb.append("    maxCharacters: ").append(toIndentedString(maxCharacters)).append("\n");
    sb.append("    regexpValidator: ").append(toIndentedString(regexpValidator)).append("\n");
    sb.append("    inputSize: ").append(toIndentedString(inputSize)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    inheritFromParent: ").append(toIndentedString(inheritFromParent)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    prefilling: ").append(toIndentedString(prefilling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o)
  {
    if (o == null)
    {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

