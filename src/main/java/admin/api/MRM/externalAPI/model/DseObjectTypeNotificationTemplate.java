/*
 * All MRM packages REST API
 * <h2>All MRM packages REST API</h1>
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package admin.api.MRM.externalAPI.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 */
@ApiModel(description = "")

public class DseObjectTypeNotificationTemplate
{
    public static final String SERIALIZED_NAME_NOTIFICATION_TEMPLATES = "notificationTemplates";
    @SerializedName(SERIALIZED_NAME_NOTIFICATION_TEMPLATES)
    private Map<String, Object> notificationTemplates = null;

    public static final String SERIALIZED_NAME_LOCALES = "locales";
    @SerializedName(SERIALIZED_NAME_LOCALES)
    private List<String> locales = null;

    public static final String SERIALIZED_NAME_FALLBACK_LOCALE = "fallbackLocale";
    @SerializedName(SERIALIZED_NAME_FALLBACK_LOCALE)
    private String fallbackLocale;

    public static final String SERIALIZED_NAME_STANDARD_PLACEHOLDERS = "standardPlaceholders";
    @SerializedName(SERIALIZED_NAME_STANDARD_PLACEHOLDERS)
    private List<String> standardPlaceholders = null;

    public static final String SERIALIZED_NAME_PLACEHOLDERS = "placeholders";
    @SerializedName(SERIALIZED_NAME_PLACEHOLDERS)
    private Map<String, String> placeholders = null;


    public DseObjectTypeNotificationTemplate notificationTemplates(Map<String, Object> notificationTemplates)
    {

        this.notificationTemplates = notificationTemplates;
        return this;
    }

    public DseObjectTypeNotificationTemplate putNotificationTemplatesItem(String key, Object notificationTemplatesItem)
    {
        if (this.notificationTemplates == null)
        {
            this.notificationTemplates = new HashMap<String, Object>();
        }
        this.notificationTemplates.put(key, notificationTemplatesItem);
        return this;
    }

    /**
     * @return notificationTemplates
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Map<String, Object> getNotificationTemplates()
    {
        return notificationTemplates;
    }


    public void setNotificationTemplates(Map<String, Object> notificationTemplates)
    {
        this.notificationTemplates = notificationTemplates;
    }


    public DseObjectTypeNotificationTemplate locales(List<String> locales)
    {

        this.locales = locales;
        return this;
    }

    public DseObjectTypeNotificationTemplate addLocalesItem(String localesItem)
    {
        if (this.locales == null)
        {
            this.locales = new ArrayList<String>();
        }
        this.locales.add(localesItem);
        return this;
    }

    /**
     * @return locales
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<String> getLocales()
    {
        return locales;
    }


    public void setLocales(List<String> locales)
    {
        this.locales = locales;
    }


    public DseObjectTypeNotificationTemplate fallbackLocale(String fallbackLocale)
    {

        this.fallbackLocale = fallbackLocale;
        return this;
    }

    /**
     * @return fallbackLocale
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public String getFallbackLocale()
    {
        return fallbackLocale;
    }


    public void setFallbackLocale(String fallbackLocale)
    {
        this.fallbackLocale = fallbackLocale;
    }


    public DseObjectTypeNotificationTemplate standardPlaceholders(List<String> standardPlaceholders)
    {

        this.standardPlaceholders = standardPlaceholders;
        return this;
    }

    public DseObjectTypeNotificationTemplate addStandardPlaceholdersItem(String standardPlaceholdersItem)
    {
        if (this.standardPlaceholders == null)
        {
            this.standardPlaceholders = new ArrayList<String>();
        }
        this.standardPlaceholders.add(standardPlaceholdersItem);
        return this;
    }

    /**
     * @return standardPlaceholders
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public List<String> getStandardPlaceholders()
    {
        return standardPlaceholders;
    }


    public void setStandardPlaceholders(List<String> standardPlaceholders)
    {
        this.standardPlaceholders = standardPlaceholders;
    }


    public DseObjectTypeNotificationTemplate placeholders(Map<String, String> placeholders)
    {

        this.placeholders = placeholders;
        return this;
    }

    public DseObjectTypeNotificationTemplate putPlaceholdersItem(String key, String placeholdersItem)
    {
        if (this.placeholders == null)
        {
            this.placeholders = new HashMap<String, String>();
        }
        this.placeholders.put(key, placeholdersItem);
        return this;
    }

    /**
     * @return placeholders
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public Map<String, String> getPlaceholders()
    {
        return placeholders;
    }


    public void setPlaceholders(Map<String, String> placeholders)
    {
        this.placeholders = placeholders;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        DseObjectTypeNotificationTemplate dseObjectTypeNotificationTemplate = (DseObjectTypeNotificationTemplate) o;
        return Objects.equals(this.notificationTemplates, dseObjectTypeNotificationTemplate.notificationTemplates) &&
                Objects.equals(this.locales, dseObjectTypeNotificationTemplate.locales) &&
                Objects.equals(this.fallbackLocale, dseObjectTypeNotificationTemplate.fallbackLocale) &&
                Objects.equals(this.standardPlaceholders, dseObjectTypeNotificationTemplate.standardPlaceholders) &&
                Objects.equals(this.placeholders, dseObjectTypeNotificationTemplate.placeholders);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(notificationTemplates, locales, fallbackLocale, standardPlaceholders, placeholders);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class DseObjectTypeNotificationTemplate {\n");
        sb.append("    notificationTemplates: ").append(toIndentedString(notificationTemplates)).append("\n");
        sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
        sb.append("    fallbackLocale: ").append(toIndentedString(fallbackLocale)).append("\n");
        sb.append("    standardPlaceholders: ").append(toIndentedString(standardPlaceholders)).append("\n");
        sb.append("    placeholders: ").append(toIndentedString(placeholders)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

